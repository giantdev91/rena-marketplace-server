// Code generated by mockery v2.2.1. DO NOT EDIT.

package mocks

import (
	context "context"
	database "rena-server-v2/internal/collection/database"

	mock "github.com/stretchr/testify/mock"

	model "rena-server-v2/internal/collection/model"
)

// CollectionDB is an autogenerated mock type for the CollectionDB type
type CollectionDB struct {
	mock.Mock
}

// DeleteCollectionBySlug provides a mock function with given fields: ctx, authorId, slug
func (_m *CollectionDB) DeleteCollectionBySlug(ctx context.Context, authorId uint, slug string) error {
	ret := _m.Called(ctx, authorId, slug)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, uint, string) error); ok {
		r0 = rf(ctx, authorId, slug)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindCollectionBySlug provides a mock function with given fields: ctx, slug
func (_m *CollectionDB) FindCollectionBySlug(ctx context.Context, slug string) (*model.Collection, error) {
	ret := _m.Called(ctx, slug)

	var r0 *model.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Collection); ok {
		r0 = rf(ctx, slug)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, slug)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCollectionByAddress provides a mock function with given fields: ctx, slug
func (_m *CollectionDB) FindCollectionByAddress(ctx context.Context, address string) (*model.Collection, error) {
	ret := _m.Called(ctx, address)

	var r0 *model.Collection
	if rf, ok := ret.Get(0).(func(context.Context, string) *model.Collection); ok {
		r0 = rf(ctx, address)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*model.Collection)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, address)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindCollections provides a mock function with given fields: ctx, criteria
func (_m *CollectionDB) FindCollections(ctx context.Context, criteria database.IterateCollectionCriteria) ([]*model.Collection, int64, error) {
	ret := _m.Called(ctx, criteria)

	var r0 []*model.Collection
	if rf, ok := ret.Get(0).(func(context.Context, database.IterateCollectionCriteria) []*model.Collection); ok {
		r0 = rf(ctx, criteria)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*model.Collection)
		}
	}

	var r1 int64
	if rf, ok := ret.Get(1).(func(context.Context, database.IterateCollectionCriteria) int64); ok {
		r1 = rf(ctx, criteria)
	} else {
		r1 = ret.Get(1).(int64)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(context.Context, database.IterateCollectionCriteria) error); ok {
		r2 = rf(ctx, criteria)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// RunInTx provides a mock function with given fields: ctx, f
func (_m *CollectionDB) RunInTx(ctx context.Context, f func(context.Context) error) error {
	ret := _m.Called(ctx, f)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, func(context.Context) error) error); ok {
		r0 = rf(ctx, f)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// SaveCollection provides a mock function with given fields: ctx, collection
func (_m *CollectionDB) SaveCollection(ctx context.Context, collection *model.Collection) error {
	ret := _m.Called(ctx, collection)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *model.Collection) error); ok {
		r0 = rf(ctx, collection)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
